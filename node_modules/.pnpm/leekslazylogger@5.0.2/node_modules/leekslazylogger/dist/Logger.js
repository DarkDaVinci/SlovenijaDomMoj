"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deep_merge_1 = __importDefault(require("@eartharoid/deep-merge"));
const defaults_1 = __importDefault(require("./defaults"));
const path_1 = require("path");
const util_1 = require("util");
class Logger {
    constructor(options = {}) {
        this.defaults = defaults_1.default;
        this._options = (0, deep_merge_1.default)(this.defaults, options);
        this.levels = Object.keys(this._options.levels);
        this._init();
    }
    _init() {
        this.levels = Object.keys(this._options.levels);
        if (this._options.transports.length < 1)
            throw new Error('At least one logger transport is required. Remove `transports` from your options to use the defaults.');
        for (const level in this._options.levels) {
            const log_level = {
                name: level,
                number: this.levels.indexOf(level),
                type: this._options.levels[level],
            };
            this[level] = (...content) => this.log(null, log_level, ...content);
            for (const namespace of this._options.namespaces) {
                this[level][namespace] = (...content) => this.log(namespace, log_level, ...content);
            }
        }
    }
    log(namespace, level, ...content) {
        const _prepareStackTrace = Error.prepareStackTrace; // eslint-disable-line no-underscore-dangle
        Error.prepareStackTrace = (_, stack) => stack;
        const stack = new Error().stack;
        const callsite = stack ? stack[2] : null;
        Error.prepareStackTrace = _prepareStackTrace;
        for (const transport of this._options.transports) {
            if (level.number >= this.levels.indexOf(transport.level)) {
                transport.write({
                    column: callsite ? callsite.getColumnNumber() : null,
                    content: (0, util_1.format)(...content),
                    file: (callsite === null || callsite === void 0 ? void 0 : callsite.getFileName()) ? (0, path_1.relative)(process.cwd(), callsite === null || callsite === void 0 ? void 0 : callsite.getFileName()) : null,
                    level,
                    line: callsite ? callsite.getLineNumber() : null,
                    namespace,
                    timestamp: new Date(),
                });
            }
        }
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this._options = (0, deep_merge_1.default)(this._options, options);
        this._init();
    }
}
exports.default = Logger;
